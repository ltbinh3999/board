{"version":3,"sources":["data.ts","view/TaskView.tsx","view/ListView.tsx","view/TaskDetailView.tsx","view/ListDetailView.tsx","view/BoardView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DataContext","React","createContext","lists","Map","tasks","taskIdC","listIdC","DataProvider","Provider","TaskView","id","depth","index","setF","listId","task","useContext","get","subTaskViews","subTasks","map","x","i","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","style","border","padding","marginTop","cursor","onClick","setTaskId","setListId","name","marginLeft","ListView","data","listName","listLength","taskIds","length","margin","width","height","display","justifyContent","setIsList","droppableId","droppableProps","flexDirection","placeholder","className","setIsAdd","src","alt","TaskDetailView","t","useState","setTask","submit","taskF","backgroundColor","position","top","left","type","value","onChange","e","newtask","target","onKeyPress","key","ListDetailView","list","setList","listF","newList","BoardView","boardId","useEffect","addSubTask","taskId","subTasksId","push","taskArr","Array","from","keys","toString","forEach","set","listIds","size","getBoard","setData","setTaskIdC","setListIdC","isAdd","isList","delete","splice","indexOf","onDragEnd","result","destination","source","startList","finishList","startTaskIds","finishTaskIds","direction","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9651bbc6.chunk.js","sourcesContent":["import React from \"react\";\nexport interface Task {\n  id: string;\n  name: string;\n  subTasks: string[];\n  date?: Date;\n}\n\nexport interface List {\n  id: string;\n  name: string;\n  taskIds: string[];\n}\nexport interface Board {\n  id: string;\n  name: string;\n  listIds: string[];\n  tasks: Map<string, Task>;\n  lists: Map<string, List>;\n}\n\nfunction getBoard(boardId: string) {\n  const addSubTask = (taskId: string, subTasksId: string) => {\n    tasks.get(taskId)?.subTasks.push(subTasksId);\n  };\n  const taskArr: Task[] = Array.from(Array(15).keys()).map((x) => ({\n    id: x.toString(),\n    name: `task${x}`,\n    subTasks: [],\n  }));\n  const tasks = new Map<string, Task>();\n  taskArr.forEach((x) => {\n    tasks.set(x.id, x);\n  });\n  addSubTask(\"0\", \"1\");\n  addSubTask(\"0\", \"2\");\n  addSubTask(\"0\", \"3\");\n  addSubTask(\"1\", \"4\");\n  addSubTask(\"1\", \"5\");\n  addSubTask(\"6\", \"7\");\n  const lists = new Map<string, List>();\n  lists.set(\"l0\", {\n    id: \"l0\",\n    name: \"List 0\",\n    taskIds: [\"0\", \"9\", \"10\", \"11\"],\n  });\n  lists.set(\"l1\", { id: \"l1\", name: \"List 1\", taskIds: [\"6\", \"8\"] });\n  lists.set(\"l2\", { id: \"l2\", name: \"List 2\", taskIds: [\"12\", \"13\", \"14\"] });\n\n  return {\n    id: \"b1\",\n    name: \"Board 1\",\n    listIds: [\"l0\", \"l1\", \"l2\"],\n    tasks,\n    lists,\n    taskIdC: tasks.size,\n    listIdC: lists.size,\n  };\n}\nconst DataContext = React.createContext({\n  lists: new Map<string, List>(),\n  tasks: new Map<string, Task>(),\n  taskIdC: 0,\n  listIdC: 0,\n});\nconst DataProvider = DataContext.Provider;\nexport { getBoard, DataContext, DataProvider };\n","import React, { ReactElement, useContext } from \"react\";\nimport { DataContext } from \"../data\";\nimport { Draggable } from \"react-beautiful-dnd\";\ninterface Props {\n  id: string;\n  depth: number;\n  index: number;\n  setF: any;\n  listId: string;\n}\nexport default function TaskView({\n  id,\n  depth,\n  index,\n  setF,\n  listId,\n}: Props): ReactElement {\n  const data = useContext(DataContext);\n  const task = data.tasks.get(id);\n  const subTaskViews = task?.subTasks.map((x, i) => (\n    <TaskView\n      key={x}\n      id={x}\n      depth={depth + 1}\n      index={i}\n      setF={setF}\n      listId={listId}\n    />\n  ));\n  if (depth === 0) {\n    return (\n      <Draggable draggableId={id} index={index}>\n        {(provided) => (\n          <div\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n          >\n            <div\n              style={{\n                border: \"1px solid black \",\n                padding: \"5px\",\n                marginTop: \"1vh\",\n                cursor: \"pointer\",\n              }}\n              onClick={() => {\n                setF.setTaskId(id);\n                setF.setListId(listId);\n              }}\n            >\n              {task?.name}\n              {subTaskViews}\n            </div>\n          </div>\n        )}\n      </Draggable>\n    );\n  } else {\n    return (\n      <div style={{ marginLeft: depth * 10 }}>\n        {task?.name}\n        {subTaskViews}\n      </div>\n    );\n  }\n}\n","import React, { ReactElement, useContext } from \"react\";\nimport { DataContext, List } from \"../data\";\nimport TaskView from \"./TaskView\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"../css/ListView.css\";\ninterface Props {\n  id: string;\n  index: number;\n  setF: any;\n}\nconst width = \"15vw\";\nexport default function ListView({ id, index, setF }: Props): ReactElement {\n  const data = useContext(DataContext);\n  const listName = data.lists.get(id)?.name as string;\n  const listLength = data.lists.get(id)?.taskIds.length;\n  return (\n    <Draggable draggableId={id} index={index}>\n      {(provided) => (\n        <div {...provided.draggableProps} ref={provided.innerRef}>\n          <div\n            style={{\n              margin: \"0 1vw 0 1vw\",\n            }}\n          >\n            <div\n              {...provided.dragHandleProps}\n              style={{\n                width: width,\n                height: \"2vh\",\n                cursor: \"pointer\",\n                display: \"flex\",\n                justifyContent: \"space-between\",\n              }}\n              onClick={() => {\n                setF.setListId(id);\n                setF.setIsList(true);\n              }}\n            >\n              <span>{listName}</span>\n              <span>{listLength}</span>\n            </div>\n            <Droppable droppableId={id}>\n              {(provided) => (\n                <div {...provided.droppableProps} ref={provided.innerRef}>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      justifyContent: \"space-around\",\n                    }}\n                  >\n                    {data.lists.get(id)?.taskIds.map((x, i) => (\n                      <TaskView\n                        key={x}\n                        id={x}\n                        depth={0}\n                        index={i}\n                        setF={setF}\n                        listId={id}\n                      />\n                    ))}\n                    {provided.placeholder}\n                    <div\n                      className=\"AddTaskButton\"\n                      onClick={() => {\n                        setF.setTaskId(data.taskIdC);\n                        setF.setListId(id);\n                        setF.setIsAdd(true);\n                      }}\n                    >\n                      <img\n                        src=\"add.png\"\n                        alt=\"add button\"\n                        style={{\n                          height: \"1em\",\n                          width: \"1em\",\n                          display: \"block\",\n                          margin: \"1vh auto 0 auto\",\n                        }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </Droppable>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n}\n","import React, { ReactElement, useContext, useState } from \"react\";\nimport { DataContext } from \"../data\";\n\ninterface Props {\n  id: string;\n  setF: any;\n}\n\nexport default function TaskDetailView({ id, setF }: Props): ReactElement {\n  const data = useContext(DataContext);\n  const t = data.tasks.get(id);\n  const [task, setTask] = useState(t ? t : { name: \"\", subTasks: [] });\n  const submit = () => {\n    setF.taskF(id, task);\n    setF.setTaskId(\"\");\n    setF.setListId(\"\");\n    setF.setIsAdd(false);\n  };\n  return (\n    <div\n      style={{\n        backgroundColor: \"lightgray\",\n        width: \"50vw\",\n        height: \"50vh\",\n        position: \"fixed\",\n        top: \"50vh\",\n        left: \"50vw\",\n        margin: \"-25vh 0 0 -25vw\",\n      }}\n    >\n      <input\n        type=\"image\"\n        src=\"close.png\"\n        style={{\n          height: \"1em\",\n          display: \"block\",\n          margin: \"0 0 0 auto\",\n        }}\n        onClick={() => {\n          submit();\n        }}\n      />\n      <input\n        type=\"text\"\n        value={task.name}\n        onChange={(e) => {\n          const newtask = { ...task };\n          newtask.name = e.target.value;\n          setTask(newtask);\n        }}\n        onKeyPress={(e) => {\n          if (e.key === \"Enter\") {\n            submit();\n          }\n        }}\n      />\n      {t && (\n        <button\n          onClick={() => {\n            setF.taskF(id);\n            setF.setTaskId(\"\");\n          }}\n        >\n          DELETE\n        </button>\n      )}\n    </div>\n  );\n}\n","import React, { ReactElement, useContext, useState } from \"react\";\nimport { DataContext } from \"../data\";\n\ninterface Props {\n  id: string;\n  setF: any;\n}\n//FIXME: Refactor this and TaskDetailView to a DetailView component.\nexport default function ListDetailView({ id, setF }: Props): ReactElement {\n  const data = useContext(DataContext);\n  const t = data.lists.get(id);\n  const [list, setList] = useState(t ? t : { id: \"\", name: \"\", taskIds: [] });\n  const submit = () => {\n    setF.listF(id, list);\n    setF.setIsList(false);\n  };\n  return (\n    <div\n      style={{\n        backgroundColor: \"lightgray\",\n        width: \"50vw\",\n        height: \"50vh\",\n        position: \"fixed\",\n        top: \"50vh\",\n        left: \"50vw\",\n        margin: \"-25vh 0 0 -25vw\",\n      }}\n    >\n      <input\n        type=\"image\"\n        src=\"close.png\"\n        style={{\n          height: \"1em\",\n          display: \"block\",\n          margin: \"0 0 0 auto\",\n        }}\n        onClick={() => {\n          submit();\n        }}\n      />\n      <input\n        type=\"text\"\n        value={list.name}\n        onChange={(e) => {\n          const newList = { ...list };\n          newList.name = e.target.value;\n          setList(newList);\n        }}\n        onKeyPress={(e) => {\n          if (e.key === \"Enter\") {\n            submit();\n          }\n        }}\n      />\n      {t && (\n        <button\n          onClick={() => {\n            setF.setIsList(false);\n            setF.listF(id);\n          }}\n        >\n          DELETE\n        </button>\n      )}\n    </div>\n  );\n}\n","import React, { ReactElement, useState, useEffect } from \"react\";\nimport { DataProvider, getBoard, List, Task } from \"../data\";\nimport ListView from \"./ListView\";\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\nimport TaskDetailView from \"./TaskDetailView\";\nimport ListDetailView from \"./ListDetailView\";\ninterface Props {\n  boardId: string;\n}\n\nexport default function BoardView({ boardId }: Props): ReactElement {\n  useEffect(() => {\n    const { name, lists, tasks, listIds, listIdC, taskIdC } = getBoard(boardId);\n    setData({ lists, tasks, listIds });\n    setTaskIdC(taskIdC);\n    setListIdC(listIdC);\n  }, []);\n\n  const [data, setData] = useState({\n    lists: new Map<string, List>(),\n    tasks: new Map<string, Task>(),\n    listIds: new Array<string>(),\n  });\n\n  const [taskId, setTaskId] = useState(\"\");\n  const [listId, setListId] = useState(\"\");\n  const [taskIdC, setTaskIdC] = useState(0);\n  const [listIdC, setListIdC] = useState(0);\n  const [isAdd, setIsAdd] = useState(false);\n  const [isList, setIsList] = useState(false);\n\n  const taskF = (id: string, task?: Task) => {\n    const tasks = new Map(data.tasks);\n    const lists = new Map(data.lists);\n    if (task) {\n      tasks.set(id.toString(), task);\n      if (isAdd) {\n        lists.get(listId)?.taskIds.push(id.toString());\n        setTaskIdC((taskIdC) => taskIdC + 1);\n      }\n    } else {\n      tasks.delete(id);\n      const list = lists.get(listId)?.taskIds as string[];\n      list.splice(list.indexOf(id), 1);\n    }\n\n    setData({ tasks, lists, listIds: data.listIds });\n  };\n\n  const listF = (id: string, list?: List) => {\n    const lists = new Map(data.lists);\n    const listIds = [...data.listIds];\n    if (list) {\n      lists.set(id, list);\n      if (id === `l${listIdC}`) {\n        listIds.push(id);\n        setListIdC((listIdC) => listIdC + 1);\n      }\n    } else {\n      lists.delete(id);\n      listIds.splice(listIds.indexOf(id), 1);\n    }\n    setData({ tasks: data.tasks, lists, listIds });\n  };\n\n  const setF = { setTaskId, taskF, setListId, setIsAdd, listF, setIsList };\n\n  const onDragEnd = (result: DropResult) => {\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (type === \"column\") {\n      const listId = Array.from(data.listIds);\n      listId.splice(source.index, 1);\n      listId.splice(destination.index, 0, draggableId);\n\n      setData({ lists: data.lists, tasks: data.tasks, listIds: listId });\n    }\n\n    if (destination.droppableId === source.droppableId) {\n      //Move inside 1 list\n      if (destination.index === source.index) {\n        return;\n      } else {\n        const list = data.lists.get(source.droppableId);\n        if (list) {\n          const taskId = Array.from(list.taskIds);\n          taskId.splice(source.index, 1);\n          taskId.splice(destination.index, 0, draggableId);\n\n          data.lists.set(source.droppableId, {\n            name: list.name,\n            id: list.id,\n            taskIds: taskId,\n          });\n          const map = new Map(data.lists);\n          setData({ lists: map, tasks: data.tasks, listIds: data.listIds });\n        }\n      }\n    } else {\n      //Move from 1 list to another\n      const startList = data.lists.get(source.droppableId);\n      const finishList = data.lists.get(destination.droppableId);\n      if (startList && finishList) {\n        const startTaskIds = Array.from(startList.taskIds);\n        const finishTaskIds = Array.from(finishList.taskIds);\n        startTaskIds.splice(source.index, 1);\n        finishTaskIds.splice(destination.index, 0, draggableId);\n        data.lists.set(source.droppableId, {\n          name: startList.name,\n          id: startList.id,\n          taskIds: startTaskIds,\n        });\n        data.lists.set(destination.droppableId, {\n          name: finishList.name,\n          id: finishList.id,\n          taskIds: finishTaskIds,\n        });\n        const map = new Map(data.lists);\n        setData({ lists: map, tasks: data.tasks, listIds: data.listIds });\n      }\n    }\n  };\n\n  return (\n    <div>\n      <DataProvider value={{ ...data, taskIdC, listIdC }}>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"all\" direction=\"horizontal\" type=\"column\">\n            {(provided) => (\n              <div {...provided.droppableProps} ref={provided.innerRef}>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  {data.listIds.map((x, i) => (\n                    <ListView key={x} id={x} index={i} setF={setF} />\n                  ))}\n                  {provided.placeholder}{\" \"}\n                  <input\n                    type=\"image\"\n                    src=\"add.png\"\n                    alt=\"add button\"\n                    style={{\n                      height: \"1em\",\n                      display: \"block\",\n                    }}\n                    onClick={() => {\n                      setF.setListId(`l${listIdC}`);\n                      setF.setIsList(true);\n                    }}\n                  />\n                </div>\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        {taskId !== \"\" && <TaskDetailView id={taskId} setF={setF} />}\n        {listId !== \"\" && isList && <ListDetailView id={listId} setF={setF} />}\n      </DataProvider>\n    </div>\n  );\n}\n","import React from \"react\";\nimport BoardView from \"./view/BoardView\";\nfunction App() {\n  return (\n    <div>\n      <BoardView boardId=\"1\" />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}